input ContactCreateInput {
  businessType: String!
  email: String!
  name: String!
  businessRequirement: String!
  clientMutationId: String
}

type ContactCreatePayload {
  error: String
  clientMutationId: String
}

"""Equipment data"""
type Equipment implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  lastMaintenance: String
  user: User
  removedAt: String
}

"""A connection to a list of items."""
type EquipmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EquipmentEdge]
  count: Int
}

input EquipmentCreateInput {
  name: String!
  clientMutationId: String
}

type EquipmentCreatePayload {
  equipmentEdge: EquipmentEdge
  error: String
  clientMutationId: String
}

"""An edge in a connection."""
type EquipmentEdge {
  """The item at the end of the edge"""
  node: Equipment

  """A cursor for use in pagination"""
  cursor: String!
}

input EquipmentEditInput {
  id: ID!
  lastMaintenance: String!
  clientMutationId: String
}

type EquipmentEditPayload {
  equipmentEdge: EquipmentEdge
  error: String
  clientMutationId: String
}

input EquipmentRemoveInput {
  id: ID!
  clientMutationId: String
}

type EquipmentRemovePayload {
  equipmentEdge: EquipmentEdge
  error: String
  clientMutationId: String
}

type Mutation {
  UserLogin(input: UserLoginInput!): UserLoginPayload
  UserCreate(input: UserCreateInput!): UserCreatePayload
  UserEdit(input: UserEditInput!): UserEditPayload
  UserRemove(input: UserRemoveInput!): UserRemovePayload
  ContactCreate(input: ContactCreateInput!): ContactCreatePayload
  EquipmentCreate(input: EquipmentCreateInput!): EquipmentCreatePayload
  EquipmentEdit(input: EquipmentEditInput!): EquipmentEditPayload
  EquipmentRemove(input: EquipmentRemoveInput!): EquipmentRemovePayload
  ProductCreate(input: ProductCreateInput!): ProductCreatePayload
  ProductEdit(input: ProductEditInput!): ProductEditPayload
  ProductRemove(input: ProductRemoveInput!): ProductRemovePayload
  ProductSign(input: ProductSignInput!): ProductSignPayload
  ProductUnSign(input: ProductUnSignInput!): ProductUnSignPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Product data"""
type Product implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  description: String
  price: Float
  meHasSigned: Boolean
  removedAt: String
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProductEdge]
  count: Int
}

input ProductCreateInput {
  name: String!
  description: String!
  price: Float!
  clientMutationId: String
}

type ProductCreatePayload {
  productEdge: ProductEdge
  error: String
  clientMutationId: String
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge"""
  node: Product

  """A cursor for use in pagination"""
  cursor: String!
}

input ProductEditInput {
  id: ID!
  description: String
  price: Float
  clientMutationId: String
}

type ProductEditPayload {
  productEdge: ProductEdge
  error: String
  clientMutationId: String
}

input ProductRemoveInput {
  id: ID!
  clientMutationId: String
}

type ProductRemovePayload {
  productEdge: ProductEdge
  error: String
  clientMutationId: String
}

input ProductSignInput {
  id: ID!
  clientMutationId: String
}

type ProductSignPayload {
  productEdge: ProductEdge
  userEdge: UserEdge
  error: String
  clientMutationId: String
}

input ProductUnSignInput {
  id: ID!
  clientMutationId: String
}

type ProductUnSignPayload {
  productEdge: ProductEdge
  userEdge: UserEdge
  error: String
  clientMutationId: String
}

"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  me: User
  users(after: String, first: Int, before: String, last: Int, search: String): UserConnection
  equipments(after: String, first: Int, before: String, last: Int, search: String): EquipmentConnection
  products(after: String, first: Int, before: String, last: Int, search: String): ProductConnection
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  name: String
  username: String
  products: [Product]
  email: String
  removedAt: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
  count: Int
}

input UserCreateInput {
  username: String!
  email: String!
  name: String!
  password: String!
  clientMutationId: String
}

type UserCreatePayload {
  userEdge: UserEdge
  error: String
  clientMutationId: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

input UserEditInput {
  id: ID!
  email: String
  name: String
  password: String
  clientMutationId: String
}

type UserEditPayload {
  userEdge: UserEdge
  error: String
  clientMutationId: String
}

input UserLoginInput {
  username: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  error: String
  clientMutationId: String
}

input UserRemoveInput {
  id: ID!
  clientMutationId: String
}

type UserRemovePayload {
  userEdge: UserEdge
  error: String
  clientMutationId: String
}
